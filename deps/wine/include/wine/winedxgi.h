/*** Autogenerated by WIDL 3.0 from wine/winedxgi.idl - Do not edit ***/

#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include <rpc.h>
#include <rpcndr.h>

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __winedxgi_h__
#define __winedxgi_h__

/* Forward declarations */

#ifndef __IWineDXGIDevice_FWD_DEFINED__
#define __IWineDXGIDevice_FWD_DEFINED__
typedef interface IWineDXGIDevice IWineDXGIDevice;
#ifdef __cplusplus
interface IWineDXGIDevice;
#endif /* __cplusplus */
#endif

#ifndef __IWineDXGIDeviceParent_FWD_DEFINED__
#define __IWineDXGIDeviceParent_FWD_DEFINED__
typedef interface IWineDXGIDeviceParent IWineDXGIDeviceParent;
#ifdef __cplusplus
interface IWineDXGIDeviceParent;
#endif /* __cplusplus */
#endif

/* Headers for imported files */

#include <dxgi.h>

#ifdef __cplusplus
extern "C" {
#endif

/*****************************************************************************
 * IWineDXGIDevice interface
 */
#ifndef __IWineDXGIDevice_INTERFACE_DEFINED__
#define __IWineDXGIDevice_INTERFACE_DEFINED__

DEFINE_GUID(IID_IWineDXGIDevice, 0x3e1ff30b, 0xc951, 0x48c3, 0xb0,0x10, 0x0f,0xb4,0x9f,0x3d,0xca,0x71);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("3e1ff30b-c951-48c3-b010-0fb49f3dca71")
IWineDXGIDevice : public IDXGIDevice1
{
    virtual HRESULT STDMETHODCALLTYPE create_surface(
        struct wined3d_texture *wined3d_texture,
        DXGI_USAGE usage,
        const DXGI_SHARED_RESOURCE *shared_resource,
        IUnknown *outer,
        void **surface) = 0;

    virtual HRESULT STDMETHODCALLTYPE create_swapchain(
        struct wined3d_swapchain_desc *desc,
        BOOL implicit,
        struct wined3d_swapchain **wined3d_swapchain) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IWineDXGIDevice, 0x3e1ff30b, 0xc951, 0x48c3, 0xb0,0x10, 0x0f,0xb4,0x9f,0x3d,0xca,0x71)
#endif
#else
typedef struct IWineDXGIDeviceVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IWineDXGIDevice *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IWineDXGIDevice *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IWineDXGIDevice *This);

    /*** IDXGIObject methods ***/
    HRESULT (STDMETHODCALLTYPE *SetPrivateData)(
        IWineDXGIDevice *This,
        REFGUID guid,
        UINT data_size,
        const void *data);

    HRESULT (STDMETHODCALLTYPE *SetPrivateDataInterface)(
        IWineDXGIDevice *This,
        REFGUID guid,
        const IUnknown *object);

    HRESULT (STDMETHODCALLTYPE *GetPrivateData)(
        IWineDXGIDevice *This,
        REFGUID guid,
        UINT *data_size,
        void *data);

    HRESULT (STDMETHODCALLTYPE *GetParent)(
        IWineDXGIDevice *This,
        REFIID riid,
        void **parent);

    /*** IDXGIDevice methods ***/
    HRESULT (STDMETHODCALLTYPE *GetAdapter)(
        IWineDXGIDevice *This,
        IDXGIAdapter **adapter);

    HRESULT (STDMETHODCALLTYPE *CreateSurface)(
        IWineDXGIDevice *This,
        const DXGI_SURFACE_DESC *desc,
        UINT surface_count,
        DXGI_USAGE usage,
        const DXGI_SHARED_RESOURCE *shared_resource,
        IDXGISurface **surface);

    HRESULT (STDMETHODCALLTYPE *QueryResourceResidency)(
        IWineDXGIDevice *This,
        IUnknown *const *resources,
        DXGI_RESIDENCY *residency,
        UINT resource_count);

    HRESULT (STDMETHODCALLTYPE *SetGPUThreadPriority)(
        IWineDXGIDevice *This,
        INT priority);

    HRESULT (STDMETHODCALLTYPE *GetGPUThreadPriority)(
        IWineDXGIDevice *This,
        INT *priority);

    /*** IDXGIDevice1 methods ***/
    HRESULT (STDMETHODCALLTYPE *SetMaximumFrameLatency)(
        IWineDXGIDevice *This,
        UINT MaxLatency);

    HRESULT (STDMETHODCALLTYPE *GetMaximumFrameLatency)(
        IWineDXGIDevice *This,
        UINT *pMaxLatency);

    /*** IWineDXGIDevice methods ***/
    HRESULT (STDMETHODCALLTYPE *create_surface)(
        IWineDXGIDevice *This,
        struct wined3d_texture *wined3d_texture,
        DXGI_USAGE usage,
        const DXGI_SHARED_RESOURCE *shared_resource,
        IUnknown *outer,
        void **surface);

    HRESULT (STDMETHODCALLTYPE *create_swapchain)(
        IWineDXGIDevice *This,
        struct wined3d_swapchain_desc *desc,
        BOOL implicit,
        struct wined3d_swapchain **wined3d_swapchain);

    END_INTERFACE
} IWineDXGIDeviceVtbl;

interface IWineDXGIDevice {
    CONST_VTBL IWineDXGIDeviceVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IWineDXGIDevice_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IWineDXGIDevice_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IWineDXGIDevice_Release(This) (This)->lpVtbl->Release(This)
/*** IDXGIObject methods ***/
#define IWineDXGIDevice_SetPrivateData(This,guid,data_size,data) (This)->lpVtbl->SetPrivateData(This,guid,data_size,data)
#define IWineDXGIDevice_SetPrivateDataInterface(This,guid,object) (This)->lpVtbl->SetPrivateDataInterface(This,guid,object)
#define IWineDXGIDevice_GetPrivateData(This,guid,data_size,data) (This)->lpVtbl->GetPrivateData(This,guid,data_size,data)
#define IWineDXGIDevice_GetParent(This,riid,parent) (This)->lpVtbl->GetParent(This,riid,parent)
/*** IDXGIDevice methods ***/
#define IWineDXGIDevice_GetAdapter(This,adapter) (This)->lpVtbl->GetAdapter(This,adapter)
#define IWineDXGIDevice_CreateSurface(This,desc,surface_count,usage,shared_resource,surface) (This)->lpVtbl->CreateSurface(This,desc,surface_count,usage,shared_resource,surface)
#define IWineDXGIDevice_QueryResourceResidency(This,resources,residency,resource_count) (This)->lpVtbl->QueryResourceResidency(This,resources,residency,resource_count)
#define IWineDXGIDevice_SetGPUThreadPriority(This,priority) (This)->lpVtbl->SetGPUThreadPriority(This,priority)
#define IWineDXGIDevice_GetGPUThreadPriority(This,priority) (This)->lpVtbl->GetGPUThreadPriority(This,priority)
/*** IDXGIDevice1 methods ***/
#define IWineDXGIDevice_SetMaximumFrameLatency(This,MaxLatency) (This)->lpVtbl->SetMaximumFrameLatency(This,MaxLatency)
#define IWineDXGIDevice_GetMaximumFrameLatency(This,pMaxLatency) (This)->lpVtbl->GetMaximumFrameLatency(This,pMaxLatency)
/*** IWineDXGIDevice methods ***/
#define IWineDXGIDevice_create_surface(This,wined3d_texture,usage,shared_resource,outer,surface) (This)->lpVtbl->create_surface(This,wined3d_texture,usage,shared_resource,outer,surface)
#define IWineDXGIDevice_create_swapchain(This,desc,implicit,wined3d_swapchain) (This)->lpVtbl->create_swapchain(This,desc,implicit,wined3d_swapchain)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IWineDXGIDevice_QueryInterface(IWineDXGIDevice* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IWineDXGIDevice_AddRef(IWineDXGIDevice* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IWineDXGIDevice_Release(IWineDXGIDevice* This) {
    return This->lpVtbl->Release(This);
}
/*** IDXGIObject methods ***/
static FORCEINLINE HRESULT IWineDXGIDevice_SetPrivateData(IWineDXGIDevice* This,REFGUID guid,UINT data_size,const void *data) {
    return This->lpVtbl->SetPrivateData(This,guid,data_size,data);
}
static FORCEINLINE HRESULT IWineDXGIDevice_SetPrivateDataInterface(IWineDXGIDevice* This,REFGUID guid,const IUnknown *object) {
    return This->lpVtbl->SetPrivateDataInterface(This,guid,object);
}
static FORCEINLINE HRESULT IWineDXGIDevice_GetPrivateData(IWineDXGIDevice* This,REFGUID guid,UINT *data_size,void *data) {
    return This->lpVtbl->GetPrivateData(This,guid,data_size,data);
}
static FORCEINLINE HRESULT IWineDXGIDevice_GetParent(IWineDXGIDevice* This,REFIID riid,void **parent) {
    return This->lpVtbl->GetParent(This,riid,parent);
}
/*** IDXGIDevice methods ***/
static FORCEINLINE HRESULT IWineDXGIDevice_GetAdapter(IWineDXGIDevice* This,IDXGIAdapter **adapter) {
    return This->lpVtbl->GetAdapter(This,adapter);
}
static FORCEINLINE HRESULT IWineDXGIDevice_CreateSurface(IWineDXGIDevice* This,const DXGI_SURFACE_DESC *desc,UINT surface_count,DXGI_USAGE usage,const DXGI_SHARED_RESOURCE *shared_resource,IDXGISurface **surface) {
    return This->lpVtbl->CreateSurface(This,desc,surface_count,usage,shared_resource,surface);
}
static FORCEINLINE HRESULT IWineDXGIDevice_QueryResourceResidency(IWineDXGIDevice* This,IUnknown *const *resources,DXGI_RESIDENCY *residency,UINT resource_count) {
    return This->lpVtbl->QueryResourceResidency(This,resources,residency,resource_count);
}
static FORCEINLINE HRESULT IWineDXGIDevice_SetGPUThreadPriority(IWineDXGIDevice* This,INT priority) {
    return This->lpVtbl->SetGPUThreadPriority(This,priority);
}
static FORCEINLINE HRESULT IWineDXGIDevice_GetGPUThreadPriority(IWineDXGIDevice* This,INT *priority) {
    return This->lpVtbl->GetGPUThreadPriority(This,priority);
}
/*** IDXGIDevice1 methods ***/
static FORCEINLINE HRESULT IWineDXGIDevice_SetMaximumFrameLatency(IWineDXGIDevice* This,UINT MaxLatency) {
    return This->lpVtbl->SetMaximumFrameLatency(This,MaxLatency);
}
static FORCEINLINE HRESULT IWineDXGIDevice_GetMaximumFrameLatency(IWineDXGIDevice* This,UINT *pMaxLatency) {
    return This->lpVtbl->GetMaximumFrameLatency(This,pMaxLatency);
}
/*** IWineDXGIDevice methods ***/
static FORCEINLINE HRESULT IWineDXGIDevice_create_surface(IWineDXGIDevice* This,struct wined3d_texture *wined3d_texture,DXGI_USAGE usage,const DXGI_SHARED_RESOURCE *shared_resource,IUnknown *outer,void **surface) {
    return This->lpVtbl->create_surface(This,wined3d_texture,usage,shared_resource,outer,surface);
}
static FORCEINLINE HRESULT IWineDXGIDevice_create_swapchain(IWineDXGIDevice* This,struct wined3d_swapchain_desc *desc,BOOL implicit,struct wined3d_swapchain **wined3d_swapchain) {
    return This->lpVtbl->create_swapchain(This,desc,implicit,wined3d_swapchain);
}
#endif
#endif

#endif


#endif  /* __IWineDXGIDevice_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IWineDXGIDeviceParent interface
 */
#ifndef __IWineDXGIDeviceParent_INTERFACE_DEFINED__
#define __IWineDXGIDeviceParent_INTERFACE_DEFINED__

DEFINE_GUID(IID_IWineDXGIDeviceParent, 0xf2b918f3, 0x603f, 0x430a, 0x9c,0xcd, 0x55,0x87,0x2b,0x6e,0x85,0xdf);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("f2b918f3-603f-430a-9ccd-55872b6e85df")
IWineDXGIDeviceParent : public IUnknown
{
    virtual struct wined3d_device_parent * STDMETHODCALLTYPE get_wined3d_device_parent(
        ) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IWineDXGIDeviceParent, 0xf2b918f3, 0x603f, 0x430a, 0x9c,0xcd, 0x55,0x87,0x2b,0x6e,0x85,0xdf)
#endif
#else
typedef struct IWineDXGIDeviceParentVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IWineDXGIDeviceParent *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IWineDXGIDeviceParent *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IWineDXGIDeviceParent *This);

    /*** IWineDXGIDeviceParent methods ***/
    struct wined3d_device_parent * (STDMETHODCALLTYPE *get_wined3d_device_parent)(
        IWineDXGIDeviceParent *This);

    END_INTERFACE
} IWineDXGIDeviceParentVtbl;

interface IWineDXGIDeviceParent {
    CONST_VTBL IWineDXGIDeviceParentVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IWineDXGIDeviceParent_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IWineDXGIDeviceParent_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IWineDXGIDeviceParent_Release(This) (This)->lpVtbl->Release(This)
/*** IWineDXGIDeviceParent methods ***/
#define IWineDXGIDeviceParent_get_wined3d_device_parent(This) (This)->lpVtbl->get_wined3d_device_parent(This)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IWineDXGIDeviceParent_QueryInterface(IWineDXGIDeviceParent* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IWineDXGIDeviceParent_AddRef(IWineDXGIDeviceParent* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IWineDXGIDeviceParent_Release(IWineDXGIDeviceParent* This) {
    return This->lpVtbl->Release(This);
}
/*** IWineDXGIDeviceParent methods ***/
static FORCEINLINE struct wined3d_device_parent * IWineDXGIDeviceParent_get_wined3d_device_parent(IWineDXGIDeviceParent* This) {
    return This->lpVtbl->get_wined3d_device_parent(This);
}
#endif
#endif

#endif


#endif  /* __IWineDXGIDeviceParent_INTERFACE_DEFINED__ */

/* Begin additional prototypes for all interfaces */


/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __winedxgi_h__ */
